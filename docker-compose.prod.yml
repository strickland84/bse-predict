services:
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: bse-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=crypto_ml
      - POSTGRES_USER=crypto_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    networks:
      - bse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crypto_user -d crypto_ml"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  bse-predictor:
    build: 
      context: .
      dockerfile: Dockerfile
    image: bse-predictor:latest
    container_name: bse-predictor-prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - DATABASE_URL=postgresql://crypto_user:${POSTGRES_PASSWORD}@postgres:5432/crypto_ml
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=production
    volumes:
      - ./config.yaml:/app/config.yaml:ro
    ports:
      - "127.0.0.1:8000:8000"  # Health check endpoint
    networks:
      - bse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Dashboard Backend API
  dashboard-backend:
    build: ./dashboard/backend
    container_name: bse-dashboard-backend-prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://crypto_user:${POSTGRES_PASSWORD}@postgres:5432/crypto_ml
    ports:
      - "0.0.0.0:8001:8000"  # Expose on all interfaces for cloudflared
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bse-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Dashboard with nginx (frontend + reverse proxy)
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile.nginx
      args:
        ENV: prod
    container_name: bse-dashboard-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - dashboard-backend
    networks:
      - bse-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Cloudflare Tunnel for HTTPS API access
  # Get your token from: https://one.dash.cloudflare.com/
  # 1. Go to Networks > Tunnels
  # 2. Create a tunnel named "bse-predict-api"
  # 3. Copy the token and add to .env as CLOUDFLARE_TUNNEL_TOKEN
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: bse-cloudflared-prod
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - bse-network
    depends_on:
      - dashboard-backend
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  postgres_data:
    driver: local

networks:
  bse-network:
    driver: bridge